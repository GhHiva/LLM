a = torch.rand(4, 5)
print(f" a: {a}\n sum(a): {sum(a)}\n a.sum():{a.sum()}\n a.sum(0): {a.sum(0)}\n a.sum(1):{a.sum(1)}\n a[0]: {a[0], sum(a[0])}\n a[1]: {a[1], sum(a[1])}\n a[2]: {a[2], sum(a[2])}\n a[3]: {a[3], sum(a[3])}")
_______________________________________________________________________________________________

a: tensor([[0.8317, 0.1053, 0.2695, 0.3588, 0.1994],
        [0.5472, 0.0062, 0.9516, 0.0753, 0.8860],
        [0.5832, 0.3376, 0.8090, 0.5779, 0.9040],
        [0.5547, 0.3423, 0.6343, 0.3644, 0.7104]])

 sum(a): tensor([2.5167, 0.7914, 2.6644, 1.3764, 2.6998])

 a.sum(): 10.048750877380371

 a.sum(0): tensor([2.5167, 0.7914, 2.6644, 1.3764, 2.6998])

 a.sum(1): tensor([1.7647, 2.4662, 3.2117, 2.6062])

 a[0]: (tensor([0.8317, 0.1053, 0.2695, 0.3588, 0.1994]), tensor(1.7647))

 a[1]: (tensor([0.5472, 0.0062, 0.9516, 0.0753, 0.8860]), tensor(2.4662))

 a[2]: (tensor([0.5832, 0.3376, 0.8090, 0.5779, 0.9040]), tensor(3.2117))

 a[3]: (tensor([0.5547, 0.3423, 0.6343, 0.3644, 0.7104]), tensor(2.6062))

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

probs = torch.tensor([0.2, 0.3, 0.5])
m = Multinomial(total_count=10, probs=probs)
sample = m.sample()
logp = m.log_prob(sample)
print(f" m is : {m}\n sample: {sample}\n logp: {logp}")
a = torch.rand(4, 5)
print(f" a: {a}\n sum(a): {sum(a)}\n a.sum():{a.sum()}\n a.sum(0): {a.sum(0)}\n a.sum(1):{a.sum(1)}\n a[0]: {a[0], sum(a[0])}\n a[1]: {a[1], sum(a[1])}\n a[2]: {a[2], sum(a[2])}\n a[3]: {a[3], sum(a[3])}")
b = torch.arange(20).view(1, 4, 5)
w1 = torch.arange(20).view(4, 5)
w = torch.sum(w1, (0,))
v = torch.sum(w1, (1,))
print(f" {w1}\n {w}\n {v} ")

___________________________________________________________________________________

m is : Multinomial()
 sample: tensor([2., 2., 6.])
 logp: -2.6468372344970703
 a: tensor([[0.8317, 0.1053, 0.2695, 0.3588, 0.1994],
        [0.5472, 0.0062, 0.9516, 0.0753, 0.8860],
        [0.5832, 0.3376, 0.8090, 0.5779, 0.9040],
        [0.5547, 0.3423, 0.6343, 0.3644, 0.7104]])
 sum(a): tensor([2.5167, 0.7914, 2.6644, 1.3764, 2.6998])
 a.sum():10.048750877380371
 a.sum(0): tensor([2.5167, 0.7914, 2.6644, 1.3764, 2.6998])
 a.sum(1):tensor([1.7647, 2.4662, 3.2117, 2.6062])
 a[0]: (tensor([0.8317, 0.1053, 0.2695, 0.3588, 0.1994]), tensor(1.7647))
 a[1]: (tensor([0.5472, 0.0062, 0.9516, 0.0753, 0.8860]), tensor(2.4662))
 a[2]: (tensor([0.5832, 0.3376, 0.8090, 0.5779, 0.9040]), tensor(3.2117))
 a[3]: (tensor([0.5547, 0.3423, 0.6343, 0.3644, 0.7104]), tensor(2.6062))
 tensor([[ 0,  1,  2,  3,  4],
        [ 5,  6,  7,  8,  9],
        [10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]])
 tensor([30, 34, 38, 42, 46])
 tensor([10, 35, 60, 85]) 

-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------

p= N[0]/N[0].sum() #the first column(): '.a','.b',...
g= torch.Generator().manual_seed(42)
n_ch = torch.multinomial(p, num_samples=27, replacement=True, generator=g)
print(f" p is : {p}\n n_ch is : {n_ch}\n n_ch.tolist() is :{n_ch.tolist()}")


strofn_ch=[]
for i in n_ch.tolist():
    j= itos[i]
    strofn_ch.append(j)
print(strofn_ch)



from collections import Counter

# Convert to Python list and count
counts = Counter(n_ch.tolist())
print(counts)
# Print counts
for value, count in counts.items():
    print(f"Value {value} appears {count} times")

______________________

p is : tensor([0.0000, 0.1377, 0.0408, 0.0481, 0.0528, 0.0478, 0.0130, 0.0209, 0.0273,
        0.0184, 0.0756, 0.0925, 0.0491, 0.0792, 0.0358, 0.0123, 0.0161, 0.0029,
        0.0512, 0.0642, 0.0408, 0.0024, 0.0117, 0.0096, 0.0042, 0.0167, 0.0290])
 n_ch is : tensor([ 1,  1,  1,  1, 11, 10, 25, 21,  1,  1,  2,  8, 19, 19,  8, 12,  1, 13, 12, 10,  1, 13,  5,  5,  1,  1, 22])
 n_ch.tolist() is :[1, 1, 1, 1, 11, 10, 25, 21, 1, 1, 2, 8, 19, 19, 8, 12, 1, 13, 12, 10, 1, 13, 5, 5, 1, 1, 22]

Counter({1: 10, 10: 2, 8: 2, 19: 2, 12: 2, 13: 2, 5: 2, 11: 1, 25: 1, 21: 1, 2: 1, 22: 1})


['a', 'a', 'a', 'a', 'k', 'j', 'y', 'u', 'a', 'a', 'b', 'h', 's', 's', 'h', 'l', 'a', 'm', 'l', 'j', 'a', 'm', 'e', 'e', 'a', 'a', 'v']


Value 1 appears 10 times
Value 11 appears 1 times
Value 10 appears 2 times
Value 25 appears 1 times
Value 21 appears 1 times
Value 2 appears 1 times
Value 8 appears 2 times
Value 19 appears 2 times
Value 12 appears 2 times
Value 13 appears 2 times
Value 5 appears 2 times
Value 22 appears 1 times

---------------------------------------------
---------------------------------------------

for i in range(10):
    ix=0
    out=[]
    while True:
        p= N[ix].float()
        p= p/p.sum()
        ix= torch.multinomial(p, num_samples=1, replacement=True, generator=g).item()
        out.append(itos[ix])
        print(ix, itos[ix], out)

        if ix==0:
         break
    print(''.join(out))

____________________

10 j ['j']
21 u ['j', 'u']
7 g ['j', 'u', 'g']
5 e ['j', 'u', 'g', 'e']
5 e ['j', 'u', 'g', 'e', 'e']
14 n ['j', 'u', 'g', 'e', 'e', 'n']
22 v ['j', 'u', 'g', 'e', 'e', 'n', 'v']
9 i ['j', 'u', 'g', 'e', 'e', 'n', 'v', 'i']
0 . ['j', 'u', 'g', 'e', 'e', 'n', 'v', 'i', '.']
jugeenvi.
19 s ['s']
0 . ['s', '.']
s.
13 m ['m']
1 a ['m', 'a']
2 b ['m', 'a', 'b']
9 i ['m', 'a', 'b', 'i']
1 a ['m', 'a', 'b', 'i', 'a']
14 n ['m', 'a', 'b', 'i', 'a', 'n']
0 . ['m', 'a', 'b', 'i', 'a', 'n', '.']
mabian.
4 d ['d']
1 a ['d', 'a']
14 n ['d', 'a', 'n']
0 . ['d', 'a', 'n', '.']
dan.
19 s ['s']
20 t ['s', 't']
1 a ['s', 't', 'a']
14 n ['s', 't', 'a', 'n']
0 . ['s', 't', 'a', 'n', '.']
stan.
19 s ['s']
9 i ['s', 'i']
12 l ['s', 'i', 'l']
1 a ['s', 'i', 'l', 'a']
25 y ['s', 'i', 'l', 'a', 'y']
12 l ['s', 'i', 'l', 'a', 'y', 'l']
5 e ['s', 'i', 'l', 'a', 'y', 'l', 'e']
12 l ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l']
1 a ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a']
18 r ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a', 'r']
5 e ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a', 'r', 'e']
13 m ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a', 'r', 'e', 'm']
1 a ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a', 'r', 'e', 'm', 'a']
8 h ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a', 'r', 'e', 'm', 'a', 'h']
0 . ['s', 'i', 'l', 'a', 'y', 'l', 'e', 'l', 'a', 'r', 'e', 'm', 'a', 'h', '.']
silaylelaremah.
12 l ['l']
9 i ['l', 'i']
0 . ['l', 'i', '.']
li.
12 l ['l']
5 e ['l', 'e']
0 . ['l', 'e', '.']
le.
5 e ['e']
16 p ['e', 'p']
9 i ['e', 'p', 'i']
1 a ['e', 'p', 'i', 'a']
3 c ['e', 'p', 'i', 'a', 'c']
8 h ['e', 'p', 'i', 'a', 'c', 'h']
1 a ['e', 'p', 'i', 'a', 'c', 'h', 'a']
12 l ['e', 'p', 'i', 'a', 'c', 'h', 'a', 'l']
5 e ['e', 'p', 'i', 'a', 'c', 'h', 'a', 'l', 'e']
14 n ['e', 'p', 'i', 'a', 'c', 'h', 'a', 'l', 'e', 'n']
0 . ['e', 'p', 'i', 'a', 'c', 'h', 'a', 'l', 'e', 'n', '.']
epiachalen.
4 d ['d']
9 i ['d', 'i']
26 z ['d', 'i', 'z']
1 a ['d', 'i', 'z', 'a']
0 . ['d', 'i', 'z', 'a', '.']
diza.




-----------------------------------------------
-----------------------------------------------


log_likelihood=0.0
n=0
for w in words[:3]:
    chars=['.']+list(w)+['.']
    for ch1,ch2 in zip(chars,chars[1:]):
        ix1= stoi[ch1]
        ix2= stoi[ch2]
        prob= N[ix1,ix2]/N[ix1].sum()
        logprob=torch.log(prob)
        log_likelihood+=logprob
        n+=1
        print(f"ch1ch2 is {ch1}{ch2}; prob is {prob:.4f}, and logprob is {logprob:.4f}")
print(log_likelihood)
null= - log_likelihood
print(f"null is {null}")
print(f"null/n is {null/n}")
______________________________

ch1ch2 is .e; prob is 0.0478, and logprob is -3.0408
ch1ch2 is em; prob is 0.0377, and logprob is -3.2793
ch1ch2 is mm; prob is 0.0253, and logprob is -3.6772
ch1ch2 is ma; prob is 0.3899, and logprob is -0.9418
ch1ch2 is a.; prob is 0.1960, and logprob is -1.6299
ch1ch2 is .o; prob is 0.0123, and logprob is -4.3982
ch1ch2 is ol; prob is 0.0780, and logprob is -2.5508
ch1ch2 is li; prob is 0.1777, and logprob is -1.7278
ch1ch2 is iv; prob is 0.0152, and logprob is -4.1867
ch1ch2 is vi; prob is 0.3541, and logprob is -1.0383
ch1ch2 is ia; prob is 0.1381, and logprob is -1.9796
ch1ch2 is a.; prob is 0.1960, and logprob is -1.6299
ch1ch2 is .a; prob is 0.1377, and logprob is -1.9829
ch1ch2 is av; prob is 0.0246, and logprob is -3.7045
ch1ch2 is va; prob is 0.2495, and logprob is -1.3882
ch1ch2 is a.; prob is 0.1960, and logprob is -1.6299
tensor(-38.7856)
null is 38.78563690185547
null/n is 2.424102306365967
